{
  "hash": "e644e0c3a30c77e6aff68aaa01fb15c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Exercise 4\"\nauthor: \"Priya\"\ndate: \"February 6,2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **4.a) Visualizing distribution**\n\n4.1.1 Loading packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n4.1.2 Data Import\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n4.1.3 **Visualising Distribution with Ridgeline Plot(Joyplot) : ggridges method**\n\nA **ridgeline plot** using `ggridges` in **R** is created with `geom_density_ridges()`, which visualizes the distribution of a numeric variable across multiple categories by stacking smoothed density plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#C8A2C8\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n4.1.4 **Varying fill colors along the x axis**\n\nIn **ggridges**, you can vary fill colors along the x-axis by mapping a continuous variable to `fill` inside `aes()`, and using `scale_fill_gradient()` or `scale_fill_viridis_c()` to apply a color gradient.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n4.1.5 **Mapping the probabilities directly onto colour**\n\nIn **ggridges**, you can map probabilities directly onto color by setting `fill` inside `aes()` to `..scaled..` or `stat(density)`, and then using `scale_fill_gradient()` to apply a color scale.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n4.1.6 **Ridgeline plots with quantile lines**\n\nIn **ggridges**, you can add quantile lines to ridgeline plots by using `geom_density_ridges(quantile_lines = TRUE, quantiles = c(0.25, 0.5, 0.75))` to display median and quartiles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n       )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE\n  ) +\n  scale_fill_brewer(palette = \"Set2\", name = \"Quartiles\") +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#C8A2C8\", \"#FFD700\", \"#FF8C00\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n4.2 **Visualising Distribution with Raincloud Plot**\n\nA **Raincloud plot** combines a **violin plot, box plot, and raw jittered data points** to provide a detailed visualization of a distribution, typically created in R using the `ggplot2` and `ggdist` packages.\n\n4.2.1 **Plotting a Half Eye graph**\n\nA **Half-Eye plot** in R, created using `ggdist::stat_halfeye()`, visualizes a distribution with a **density plot, point interval, and optional slab** to highlight key summary statistics.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = \"#C8A2C8\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n4.2.2 **Adding the boxplot with `geom_boxplot()`**\n\nYou can add a **boxplot** to a **Half-Eye plot** by including `geom_boxplot(width = 0.2, outlier.shape = NA)` to display summary statistics without overlapping outliers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = \"#C8A2C8\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n4.2.3 **Adding the Dot Plots with `stat_dots()`**\n\nYou can add **dot plots** to a **Half-Eye plot** by including `stat_dots(side = \"left\", dotsize = 0.5)` to show individual data points alongside the density.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n4.2.4 Finishing touch\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n# **4.b) Visual Statistical Analysis**\n\n**Visual statistical analysis** involves using graphical representations like histograms, box plots, and density plots to explore data distributions, trends, and relationships, often enhanced with statistical summaries and significance tests.\n\n4.3 **Visual Statistical Analysis with ggstatsplot**\n\nThe **ggstatsplot** package in R enables **visual statistical analysis** by combining `ggplot2` with statistical tests, providing plots with effect sizes, confidence intervals, and significance annotations\n\n4.3.1 Installing , Launching R packages and Importing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n4.3.2 **One-sample test: *gghistostats()* method**\n\n4.3.3 **Unpacking the Bayes Factor**\n\n4.3.4 **How to interpret Bayes Factor**\n\n4.3.5 **Two-sample mean test: *ggbetweenstats()***\n\n4.3.6 **Oneway ANOVA Test: *ggbetweenstats()* method**\n\n4.3.7 **Significant Test of Correlation: *ggscatterstats()***\n\n4.3.8 **Significant Test of Association (Depedence) : *ggbarstats()* methods**\n\n4.4 **Visualising Models**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\n\n4.4.1 **Importing Excel file: readxl methods**\n\n4.4.2 **Multiple Regression Model using lm()**\n\n4.4.3 **Model Diagnostic: checking for multicolinearity:**\n\n4.4.4 **Model Diagnostic: checking normality assumption**\n\n4.4.5 **Model Diagnostic: Check model for homogeneity of variances**\n\n4.4.6 **Model Diagnostic: Complete check**\n\n4.4.7 **Visualising Regression Parameters: see methods**\n\n4.4.8 **Visualising Regression Parameters: *ggcoefstats()* methods**\n\n# **4.c)Â  Visualising Uncertainty**\n\n4.5 Installing , Launching R packages and Importing data\n\n4.5.1 **Visualizing the uncertainty of point estimates: ggplot2 methods**\n\n4.5.2 **Plotting standard error bars of point estimates**\n\n4.5.3 **Plotting confidence interval of point estimates**\n\n4.5.4 **Visualizing the uncertainty of point estimates with interactive error bars**\n\n4.6 **Visualising Uncertainty: ggdist package**\n\n4.6.1 **Visualizing the uncertainty of point estimates: ggdist methods**\n\n4.6.2 **Visualizing the uncertainty of point estimates: ggdist methods**\n\n4.6.3 **Visualizing the uncertainty of point estimates: ggdist methods**\n\n4.7 **Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)**\n\n4.7.1 **Installing and launching ungeviz package**\n\n4.7.2 **Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)**\n\n# **4.d)Â  Funnel Plots for Fair Comparisons**\n",
    "supporting": [
      "Hands-on_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}